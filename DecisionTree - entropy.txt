import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score, classification_report  # Added classification_report
from imblearn.over_sampling import SMOTE  # For SMOTE

try:
    data = pd.read_csv('ptrain.csv')
    test_data = pd.read_csv('ptest.csv')
except FileNotFoundError:
    print("Error: Could not find input CSV files.")
    exit()

test_id = test_data['id']
data.drop('id', axis=1, inplace=True)
test_data.drop('id', axis=1, inplace=True, errors='ignore')  # Drop 'id' from test_data

x = data.drop("Response", axis=1)
y = data["Response"]

# Check class distribution (before SMOTE)
print("Class distribution before SMOTE:")
print(y.value_counts())

# 1. Scaling the data
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)

# 2. Applying SMOTE
smote = SMOTE(random_state=42)  # Initialize SMOTE
x_resampled, y_resampled = smote.fit_resample(x_scaled, y)

# Check class distribution (after SMOTE)
print("\nClass distribution after SMOTE:")
print(pd.Series(y_resampled).value_counts())

# 3. Applying PCA
pca = PCA(n_components=0.95)
x_pca = pca.fit_transform(x_resampled)  # Use resampled data

x_train, x_test, y_train, y_test = train_test_split(x_pca, y_resampled, test_size=0.2, random_state=42)  # Split the resampled data
classifier = DecisionTreeClassifier(criterion='entropy', random_state=42)
classifier.fit(x_train, y_train)
y_predict = classifier.predict(x_test)

accuracy = accuracy_score(y_test, y_predict)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Print classification report for more detailed evaluation
print("\nClassification Report:")
print(classification_report(y_test, y_predict))

# Preprocess test data
test_data_scaled = scaler.transform(test_data)  # Use the SAME scaler!
test_data_pca = pca.transform(test_data_scaled)      # Use the SAME PCA!

y_predict_full = classifier.predict(test_data_pca)
outcome = pd.DataFrame({
    'id': test_id,
    'Response': y_predict_full
})
outcome.to_csv('Submission.csv', index=False)

print("Submission file created successfully!")